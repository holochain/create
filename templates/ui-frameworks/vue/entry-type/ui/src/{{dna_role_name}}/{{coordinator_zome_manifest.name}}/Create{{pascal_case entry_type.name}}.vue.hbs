<template>
  <div>
    <h3>Create {{title_case entry_type.name}}</h3>

{{#each entry_type.fields}}
  {{#if widget}}
    <div>
    {{#if (not (eq cardinality "vector") )}}
      {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) variable_to_read=(camel_case field_name) variable_to_change=(camel_case field_name) required=(eq cardinality "single")}}
    {{else}}
      {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
    {{/if}}
    </div>
 {{/if}}
{{/each}}

    <button :disabled="!is{{pascal_case entry_type.name}}Valid" @click="create{{pascal_case entry_type.name}}">
      Create {{pascal_case entry_type.name}}
    </button>
  </div>
</template>

<script lang="ts">
import { inject, ComputedRef, defineComponent } from 'vue';
import { AppClient, Record, AgentPubKey, EntryHash, ActionHash, DnaHash } from '@holochain/client';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

export default defineComponent({
  data(): {
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (not (eq cardinality "vector" ) )}}
    {{camel_case field_name}}: {{> (concat field_type.type "/type")}}{{#if (eq cardinality "option")}}| undefined{{/if}};
    {{else}}
    {{#if (eq field_type.type "u8")}}
    {{camel_case field_name}}: Uint8Array;
    {{else}}
    {{camel_case field_name}}: Array<{{> (concat field_type.type "/type")}}>;
    {{/if}}
    {{/if}}
  {{/if}}
{{/each}}
  } {
    return {
      {{#each entry_type.fields}}
        {{#if widget}}
          {{#if (not (eq cardinality "vector" ) )}}
      {{camel_case field_name}}: {{> (concat field_type.type "/" widget "/initial-value") field_type=field_type}},
          {{else}}
      {{camel_case field_name}}: [{{> (concat field_type.type "/" widget "/initial-value") field_type=field_type}}],
          {{/if}}
        {{/if}}
      {{/each}}
    }
  },
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if (not widget)}}
  props: {
    {{/if}}
  {{/each}}
{{/uniq_lines}}
    {{#each entry_type.fields}}
      {{#if (not widget)}}
    {{camel_case field_name}}: {
      type: null,
      required: true
    },
      {{/if}}
    {{/each}}
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if (not widget)}}
  },
    {{/if}}
  {{/each}}
{{/uniq_lines}}
  computed: {
    is{{pascal_case entry_type.name}}Valid() {
    return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat "this." (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && this.{{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};
    },
  },
  mounted() {
{{#each entry_type.fields}}
  {{#if (not widget) }}
    {{#if (ne cardinality "option")}}
    if (this.{{camel_case field_name}} === undefined) {
      throw new Error(`The {{camel_case field_name}} input is required for the Create{{pascal_case ../entry_type.name}} element`);
    }
    {{/if}}
  {{/if}}
{{/each}}
  },
  methods: {
    async create{{pascal_case entry_type.name}}() {
      const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = {
{{#each entry_type.fields}}
  {{#if (eq cardinality "single") }}
        {{snake_case field_name}}: this.{{camel_case field_name}}!,
  {{else}}
        {{snake_case field_name}}: this.{{camel_case field_name}}{{#if (eq cardinality "vector") }}{{#if field_type.type "u8"}} as Uint8Array{{else}}as Array<{{> (concat field_type.type "/type") }}>{{/if}}{{/if}},
  {{/if}}
{{/each}}
      };

      try {
        const record: Record = await this.client.callZome({
          cap_secret: null,
          role_name: '{{dna_role_name}}',
          zome_name: '{{coordinator_zome_manifest.name}}',
          fn_name: 'create_{{snake_case entry_type.name}}',
          payload: {{camel_case entry_type.name}},
        });
        this.$emit('{{kebab_case entry_type.name}}-created', record.signed_action.hashed.hash);
      } catch (e: any) {
        alert(e);
      }
    },
  },
  emits: ['{{kebab_case entry_type.name}}-created'],
  setup() {
    const client = (inject('client') as ComputedRef<AppClient>).value;
    return { client };
  },
});
</script>