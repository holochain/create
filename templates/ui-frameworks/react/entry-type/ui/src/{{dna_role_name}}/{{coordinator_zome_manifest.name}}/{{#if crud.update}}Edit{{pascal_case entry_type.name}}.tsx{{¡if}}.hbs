import { Record, HolochainError } from '@holochain/client';
import { FC, useState, useEffect, useContext, useCallback } from 'react';

import type { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';
import { ClientContext } from '../../ClientContext';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

const Edit{{pascal_case entry_type.name}}: FC<Edit{{pascal_case entry_type.name}}Props> = ({
{{#if link_from_original_to_each_update}}
  original{{pascal_case entry_type.name}}Hash,
{{/if}}
  currentRecord,
  current{{pascal_case entry_type.name}},
  on{{pascal_case entry_type.name}}Updated,
  on{{pascal_case entry_type.name}}UpdateError,
  onEditCanceled,
}) => {
  const {client} = useContext(ClientContext);
{{#each entry_type.fields}}
  {{#if widget }}
    {{#if (not (eq cardinality "vector" ) )}}
  const [{{camel_case field_name}}, set{{pascal_case field_name}}] = useState<{{> (concat field_type.type "/type")}} | undefined>(current{{pascal_case ../entry_type.name}}?.{{snake_case field_name}});
    {{else}}
  const [{{camel_case field_name}}, set{{pascal_case field_name}}] = useState<{{> (concat field_type.type "/type")}}[] | undefined>(current{{pascal_case ../entry_type.name}}?.{{snake_case field_name}});
    {{/if}}
  {{/if}}
{{/each}}
  const [is{{pascal_case entry_type.name}}Valid, setIs{{pascal_case entry_type.name}}Valid] = useState(false);

  const update{{pascal_case entry_type.name}} = useCallback(async () => {
    const {{camel_case entry_type.name}}: Partial<{{pascal_case entry_type.name}}> = {
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (eq cardinality "single") }}
        {{snake_case field_name}}: {{camel_case field_name}},
      {{else}}
        {{snake_case field_name}}: {{camel_case field_name}}{{#if (eq cardinality "vector") }} as {{> (concat field_type.type "/type") }}[]{{/if}},
    {{/if}}
  {{else}}
  {{/if}}
{{/each}}
{{#each entry_type.fields}}
  {{#if (not widget)}}
        {{snake_case field_name}}: current{{pascal_case ../entry_type.name}}?.{{snake_case field_name}},
  {{/if}}
{{/each}}
    };
    try {
      const updateRecord = await client?.callZome({
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'update_{{snake_case entry_type.name}}',
        payload: {
          {{#if link_from_original_to_each_update}}
          original_{{snake_case entry_type.name}}_hash: original{{pascal_case entry_type.name}}Hash,
          {{/if}}
          previous_{{snake_case entry_type.name}}_hash: currentRecord?.signed_action.hashed.hash,
          updated_{{snake_case entry_type.name}}: {{camel_case entry_type.name}}
        }
      });
      on{{pascal_case entry_type.name}}Updated(updateRecord.signed_action.hashed.hash);
    } catch (e) {
      on{{pascal_case entry_type.name}}UpdateError && on{{pascal_case entry_type.name}}UpdateError(e as HolochainError)
    }
  }, [
    client,
    currentRecord,
    on{{pascal_case entry_type.name}}Updated,
    on{{pascal_case entry_type.name}}UpdateError,
  {{#if link_from_original_to_each_update}}
    original{{pascal_case entry_type.name}}Hash,
  {{/if}}
{{#each entry_type.fields}}
  {{#if (not widget)}}
    current{{pascal_case ../entry_type.name}}?.{{snake_case field_name}},
  {{else}}
    {{camel_case field_name}},
  {{/if}}
{{/each}}
  ]);

  useEffect(() => {
    if (!currentRecord) {
      throw new Error(`The currentRecord prop is required`);
    }
{{#if link_from_original_to_each_update}}
    if (!original{{pascal_case entry_type.name}}Hash) {
      throw new Error(`The original{{pascal_case entry_type.name}}Hash prop is required`);
    }
{{/if}}
  }, [currentRecord{{#if link_from_original_to_each_update}}, original{{pascal_case entry_type.name}}Hash{{/if}}]);

  useEffect(() => {
    setIs{{pascal_case entry_type.name}}Valid(true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(camel_case field_name) }}{{/if}}{{#if (eq cardinality "vector")}} && {{camel_case field_name}}!.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}});
  }, [{{#each entry_type.fields}}{{#if widget}}{{camel_case field_name}}{{#unless @last}}, {{/unless}}{{/if}}{{/each}}]);

  return (
    <section>
{{#each entry_type.fields}}
  {{#if widget}}
      <div>
        {{#if (not (eq cardinality "vector") )}}
        {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) variable_to_read=(camel_case field_name) variable_to_change=(camel_case field_name) required=(eq cardinality "single") }}
        {{else}}
        {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
        {{/if}}
      </div>

  {{/if}}
{{/each}}
      <div>
        <button onClick={onEditCanceled}>Cancel</button>
        <button onClick={update{{pascal_case entry_type.name}}} disabled={!is{{pascal_case entry_type.name}}Valid}>Edit {{pascal_case entry_type.name}}</button>
      </div>
    </section>
  );
};

interface Edit{{pascal_case entry_type.name}}Props {
{{#if link_from_original_to_each_update}}
  original{{pascal_case entry_type.name}}Hash: Uint8Array,
{{/if}}
  currentRecord: Record | undefined,
  current{{pascal_case entry_type.name}}: {{pascal_case entry_type.name}} | undefined,
  on{{pascal_case entry_type.name}}Updated: (hash?: Uint8Array) => void,
  onEditCanceled: () => void,
  on{{pascal_case entry_type.name}}UpdateError?: (error: HolochainError) => void,
}

export default Edit{{pascal_case entry_type.name}};