import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { InstalledCell, ActionHash, Record, AgentPubKey, EntryHash, AppClient, DnaHash, HolochainError } from '@holochain/client';
import { consume } from '@lit-labs/context';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

import { sharedStyles } from '../../shared-styles';
import { clientContext } from '../../contexts';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';

@customElement('create-{{kebab_case entry_type.name}}')
export class Create{{pascal_case entry_type.name}} extends LitElement {
  @consume({ context: clientContext })
  client!: AppClient;

  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (eq cardinality "single")}}
  @property()
  {{camel_case field_name}}!: {{> (concat field_type.type "/type") }};
      {{else}}
        {{#if (eq cardinality "option")}}
  @property()
  {{camel_case field_name}}: {{> (concat field_type.type "/type") }} | undefined;
        {{else}}
  @property()
  {{camel_case field_name}}!: Array<{{> (concat field_type.type "/type") }}>;

        {{/if}}
      {{/if}}
    {{/if}}
  {{/each}}

  {{#each entry_type.fields}}
    {{#if widget }}
      {{#if (not (eq cardinality "vector" ) )}}
  @state()
  _{{camel_case field_name}}: {{> (concat field_type.type "/type") }}{{#if (eq cardinality "option")}} | undefined{{/if}} = {{> (concat field_type.type "/" widget "/initial-value") field_type=field_type}};

      {{else}}
  @state()
  _{{camel_case field_name}}: Array<{{> (concat field_type.type "/type") }}> = [{{> (concat field_type.type "/" widget "/initial-value") field_type=field_type}}];

      {{/if}}
    {{/if}}
  {{/each}}

  firstUpdated() {
{{#each entry_type.fields}}
  {{#if (not widget) }}
    {{#if (ne cardinality "option")}}
    if (this.{{camel_case field_name}} === undefined) {
      throw new Error(`The {{camel_case field_name}} input is required for the create-{{kebab_case ../entry_type.name}} element`);
    }
    {{/if}}
  {{/if}}
{{/each}}
  }

  is{{pascal_case entry_type.name}}Valid() {
    return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat "this._" (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && this._{{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};
  }

  async create{{pascal_case entry_type.name}}() {
    const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = {
    {{#each entry_type.fields}}
      {{#if widget}}
        {{snake_case field_name}}: this._{{camel_case field_name}},
      {{else}}
        {{snake_case field_name}}: this.{{camel_case field_name}},
      {{/if}}
    {{/each}}
    };

    try {
      const record: Record = await this.client.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'create_{{snake_case entry_type.name}}',
        payload: {{camel_case entry_type.name}},
      });

      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-created', {
        composed: true,
        bubbles: true,
        detail: {
          {{camel_case entry_type.name}}Hash: record.signed_action.hashed.hash
        }
      }));
    } catch (e) {
      alert((e as HolochainError).message);
    }
  }

  render() {
    return html`
      <div>
        <h3>Create {{pascal_case entry_type.name}}</h3>
{{#each entry_type.fields}}
  {{#if widget}}
        <div>
    {{#if (not (eq cardinality "vector") )}}
          {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) variable_to_read=(concat "this._" (camel_case field_name) ) variable_to_change=(concat "this._" (camel_case field_name) ) required=(eq cardinality "single") }}
    {{else}}
          {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
    {{/if}}

        </div>
  {{/if}}
{{/each}}

        <button
          .disabled=${!this.is{{pascal_case entry_type.name}}Valid()}
          @click=${() => this.create{{pascal_case entry_type.name}}()}
        >
          Create {{title_case entry_type.name}}
        </button>
      </div>
    `;
  }

  static styles = sharedStyles;
}