import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { EntryHash, Record, ActionHash, AppClient, DnaHash, HolochainError } from '@holochain/client';
import { consume } from '@lit-labs/context';
import { Task } from '@lit-labs/task';
import { decode } from '@msgpack/msgpack';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/detail/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

{{#if crud.update}}
import './edit-{{kebab_case entry_type.name}}';
{{/if}}

import { sharedStyles } from '../../shared-styles';
import { clientContext } from '../../contexts';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';

@customElement('{{kebab_case entry_type.name}}-detail')
export class {{pascal_case entry_type.name}}Detail extends LitElement {
  @consume({ context: clientContext })
  client!: AppClient;

  @property({
    hasChanged: (newVal: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}, oldVal: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}) => newVal?.toString() !== oldVal?.toString()
  })
  {{camel_case entry_type.name}}Hash!: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}};

  _fetchRecord = new Task(this, ([{{camel_case entry_type.name}}Hash]: Array<{{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}>) => this.client.callZome({
      cap_secret: null,
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: '{{#if crud.update}}get_latest_{{snake_case entry_type.name}}{{else}}get_{{snake_case entry_type.name}}{{/if}}',
      payload: {{camel_case entry_type.name}}Hash,
  }) as Promise<Record | undefined>, () => [this.{{camel_case entry_type.name}}Hash]);

  {{#if crud.update}}
  @state() _editing = false;
  {{/if}}

  firstUpdated() {
    if (!this.{{camel_case entry_type.name}}Hash) {
      throw new Error(`The {{camel_case entry_type.name}}Hash property is required for the {{kebab_case entry_type.name}}-detail element`);
    }
  }

  {{#if crud.delete}}
  async delete{{pascal_case entry_type.name}}() {
    try {
      await this.client.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'delete_{{snake_case entry_type.name}}',
        payload: this.{{camel_case entry_type.name}}Hash,
      });
      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-deleted', {
        bubbles: true,
        composed: true,
        detail: {
          {{camel_case entry_type.name}}Hash: this.{{camel_case entry_type.name}}Hash
        }
      }));
      this._fetchRecord.run();
    } catch (e) {
      alert((e as HolochainError).message)
    }
  }
  {{/if}}

  renderDetail(record: Record) {
    const {{camel_case entry_type.name}} = decode((record.entry as any).Present.entry) as {{pascal_case entry_type.name}};

    return html`
      <section>
{{#each entry_type.fields}}
  {{#if widget}}
    {{#if (not (eq cardinality "vector") )}}
        <div>
	        <span><strong>{{title_case field_name}}: </strong></span>
 	        <span>{{> (concat field_type.type "/" widget "/detail/render") variable_to_read=(concat (camel_case ../entry_type.name) "." (snake_case field_name) ) }}</span>
        </div>
    {{else}}
        {{> Vec/detail/render variable_to_read=(concat (camel_case ../entry_type.name) "." (snake_case field_name) ) field_name=field_name field_type=field_type widget=widget }}
    {{/if}}
  {{/if}}
{{/each}}

      	<div>
{{#if crud.update}}
          <button @click=${() => { this._editing = true; } }>edit</button>
{{/if}}
{{#if crud.delete}}
          <button @click=${() => this.delete{{pascal_case entry_type.name}}()}>delete</button>
{{/if}}
        </div>
      </section>
    `;
  }

  render{{pascal_case entry_type.name}}(record: Record | undefined) {
    if (!record) return html`<div class="alert">The requested {{lower_case entry_type.name}} was not found.</div>`;
    {{#if crud.update}}
    if (this._editing) {
    	return html`
        <edit-{{kebab_case entry_type.name}}
        {{#if link_from_original_to_each_update}}
          .original{{pascal_case entry_type.name}}Hash=${this.{{camel_case entry_type.name}}Hash}
        {{/if}}
          .currentRecord=${record}
          @{{kebab_case entry_type.name}}-updated=${async () => {
            this._editing = false;
            await this._fetchRecord.run();
          } }
          @edit-canceled=${() => { this._editing = false; } }
        ></edit-{{kebab_case entry_type.name}}>
      `;
    }
    {{/if}}
    return this.renderDetail(record);
  }

  render() {
    return this._fetchRecord.render({
      pending: () => html`<progress></progress>`,
      complete: (record) => this.render{{pascal_case entry_type.name}}(record),
      error: (e: any) => html`<div class="alert">Error fetching the {{lower_case entry_type.name}}: ${e.message}</div>`
    });
  }

  static styles = sharedStyles;
}