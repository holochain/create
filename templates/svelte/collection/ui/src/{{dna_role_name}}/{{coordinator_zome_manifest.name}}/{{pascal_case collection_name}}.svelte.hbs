<script lang="ts">
import { onMount, getContext } from 'svelte';
import '@material/mwc-circular-progress';
import type { EntryHash, Record, AgentPubKey, ActionHash, AppAgentClient, NewEntryAction } from '@holochain/client';
import { clientContext } from '../../contexts';
import {{pascal_case referenceable.name}}Detail from './{{pascal_case referenceable.name}}Detail.svelte';
import type { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

{{#if (eq collection_type.type "ByAuthor")}}
export let author: AgentPubKey;
{{/if}}

let client: AppAgentClient = (getContext(clientContext) as any).getClient();

let hashes: Array<{{referenceable.hash_type}}> | undefined;
let loading = true;
let error: any = undefined;

$: hashes, loading, error;

onMount(async () => {
  {{#if (eq collection_type.type "ByAuthor")}}
    if (author === undefined) {
      throw new Error(`The author input is required for the {{pascal_case collection_name}} element`);
    }

  {{/if}}

  await fetch{{pascal_case (plural referenceable.name)}}();
  client.on('signal', signal => {
    if (signal.zome_name !== '{{coordinator_zome_manifest.name}}') return;
    const payload = signal.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
    if (payload.type !== 'EntryCreated') return;
    if (payload.app_entry.type !== '{{pascal_case referenceable.name}}') return;
{{#if (eq collection_type.type "ByAuthor")}}
    if (author.toString() !== client.myPubKey.toString()) return;
{{/if}}
    hashes = [...hashes, {{#if (eq referenceable.hash_type "ActionHash")}}payload.action.hashed.hash{{else}}(payload.action.hashed.content as NewEntryAction).entry_hash{{/if}}];
  });
});

async function fetch{{pascal_case (plural referenceable.name)}}() {
  try {
    const links = await client.callZome({
      cap_secret: null,
      role_name: '{{dna_role_name}}',
      zome_name: '{{snake_case coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case collection_name}}',
      payload: {{#if (eq collection_type.type "ByAuthor")}}author{{else}}null{{/if}},
    });
    hashes = links.map(l => l.target);
  } catch (e) {
    error = e;
  }
  loading = false;
}

</script>

{#if loading}
<div style="display: flex; flex: 1; align-items: center; justify-content: center">
  <mwc-circular-progress indeterminate></mwc-circular-progress>
</div>
{:else if error}
<span>Error fetching the {{lower_case (plural referenceable.name)}}: {error.data.data}.</span>
{:else if hashes.length === 0}
<span>No {{lower_case (plural referenceable.name)}} found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.</span>
{:else}
<div style="display: flex; flex-direction: column">
  {#each hashes as hash}
    <div style="margin-bottom: 8px;">
      <{{pascal_case referenceable.name}}Detail {{camel_case referenceable.name}}Hash={hash}  on:{{kebab_case referenceable.name}}-deleted={() => fetch{{pascal_case (plural referenceable.name)}}()}></{{pascal_case referenceable.name}}Detail>
    </div>
  {/each}
</div>
{/if}

