import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { AppAgentClient, AgentPubKey, Link, EntryHash, ActionHash, Record, NewEntryAction } from '@holochain/client';
import { consume } from '@lit-labs/context';
import { Task } from '@lit-labs/task';
import '@material/mwc-circular-progress';

import { clientContext } from '../../contexts';
import { {{pascal_case coordinator_zome_manifest.name}}Signal } from './types';

import './{{kebab_case referenceable.name}}-detail';

@customElement('{{kebab_case collection_name}}')
export class {{pascal_case collection_name}} extends LitElement {
  @consume({ context: clientContext })
  client!: AppAgentClient;
  
  {{#if (eq collection_type.type "ByAuthor")}}
  @property({
    hasChanged: (newVal: AgentPubKey, oldVal: AgentPubKey) => newVal?.toString() !== oldVal?.toString()
  })
  author!: AgentPubKey;

  {{/if}}
  @state()
  signaledHashes: Array<{{referenceable.hash_type}}> = [];
  
  _fetch{{pascal_case (plural referenceable.name)}} = new Task(this, ([{{#if (eq collection_type.type "ByAuthor")}}author{{/if}}]) => this.client.callZome({
      cap_secret: null,
      role_name: '{{dna_role_name}}',
      zome_name: '{{coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case collection_name}}',
      payload: {{#if (eq collection_type.type "ByAuthor")}}author{{else}}null{{/if}},
  }) as Promise<Array<Link>>, () => [{{#if (eq collection_type.type "ByAuthor")}}this.author{{/if}}]);

  firstUpdated() {
  {{#if (eq collection_type.type "ByAuthor")}}
    if (this.author === undefined) {
      throw new Error(`The author property is required for the {{kebab_case collection_name}} element`);
    }

  {{/if}}
    this.client.on('signal', signal => {
      if (signal.zome_name !== '{{coordinator_zome_manifest.name}}') return; 
      const payload = signal.payload as {{pascal_case coordinator_zome_manifest.name}}Signal;
      if (payload.type !== 'EntryCreated') return;
      if (payload.app_entry.type !== '{{pascal_case referenceable.name}}') return;
{{#if (eq collection_type.type "ByAuthor")}}
      if (this.author.toString() !== this.client.myPubKey.toString()) return;
{{/if}}
      this.signaledHashes = [{{#if (eq referenceable.hash_type "ActionHash")}}payload.action.hashed.hash{{else}}(payload.action.hashed.content as NewEntryAction).entry_hash{{/if}}, ...this.signaledHashes];
    });
  }
  
  renderList(hashes: Array<{{referenceable.hash_type}}>) {
    if (hashes.length === 0) return html`<span>No {{lower_case (plural referenceable.name)}} found{{#if (eq collection_type.type "ByAuthor")}} for this author{{/if}}.</span>`;
    
    return html`
      <div style="display: flex; flex-direction: column">
        ${hashes.map(hash => 
          html`<{{kebab_case referenceable.name}}-detail .{{camel_case referenceable.name}}Hash=${hash} style="margin-bottom: 16px;" @{{kebab_case referenceable.name}}-deleted=${() => { this._fetch{{pascal_case (plural referenceable.name)}}.run(); this.signaledHashes = []; } }></{{kebab_case referenceable.name}}-detail>`
        )}
      </div>
    `;
  }

  render() {
    return this._fetch{{pascal_case (plural referenceable.name)}}.render({
      pending: () => html`<div style="display: flex; flex: 1; align-items: center; justify-content: center">
        <mwc-circular-progress indeterminate></mwc-circular-progress>
      </div>`,
      complete: (links) => this.renderList([...this.signaledHashes, ...links.map(l => l.target)]),
      error: (e: any) => html`<span>Error fetching the {{lower_case (plural referenceable.name)}}: ${e.data.data}.</span>`
    });
  }
}
