<script lang="ts">
import { onMount, getContext } from 'svelte';
import '@material/mwc-circular-progress';
import type { AppAgentClient, Record, ActionHash, EntryHash, AgentPubKey, NewEntryAction } from '@holochain/client';
import { clientContext } from '../../contexts';
import type { {{pascal_case ../entry_type.name}} } from './types';
import {{pascal_case ../entry_type.name}}Detail from './{{pascal_case ../entry_type.name}}Detail.svelte';

export let {{camel_case linked_from.singular_arg}}: {{linked_from.hash_type}};

let client: AppAgentClient = (getContext(clientContext) as any).getClient();

let hashes: Array<{{#if ../entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}> | undefined;

let loading = true;
let error: any = undefined;

$: hashes, loading, error;

onMount(async () => {
  if ({{camel_case linked_from.singular_arg}} === undefined) {
    throw new Error(`The {{camel_case linked_from.singular_arg}} input is required for the {{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} element`);
  }

  try {
    const records = await client.callZome({
      cap_secret: null,
      role_name: '{{../dna_role_name}}',
      zome_name: '{{../coordinator_zome_manifest.name}}',
      fn_name: 'get_{{snake_case (plural ../entry_type.name)}}_for_{{snake_case linked_from.name}}',
      payload: {{camel_case linked_from.singular_arg}}
    });
    hashes = records.map(r => {{#if ../entry_type.reference_entry_hash}}(r.signed_action.hashed.content as NewEntryAction).entry_hash{{else}}r.signed_action.hashed.hash{{/if}});
  } catch (e) {
    error = e;
  }
  loading = false;
});

</script>

{#if loading }
<div style="display: flex; flex: 1; align-items: center; justify-content: center">
  <mwc-circular-progress indeterminate></mwc-circular-progress>
</div>
{:else if error}
<span>Error fetching {{lower_case (plural ../entry_type.name)}}: ${error.data.data}.</span>
{:else if hashes.length === 0}
<span>No {{lower_case (plural ../entry_type.name)}} found for this {{lower_case linked_from.name}}.</span>
{:else}
<div style="display: flex; flex-direction: column">
  {#each hashes as hash}
    <div style="margin-bottom: 8px;">
      <{{pascal_case ../entry_type.name}}Detail {{camel_case ../entry_type.name}}Hash={hash}></{{pascal_case ../entry_type.name}}Detail>
    </div>
  {/each}
</div>
{/if}
