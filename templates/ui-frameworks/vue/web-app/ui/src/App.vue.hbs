<template>
  <div>
    <div>
      <a href="https://developer.holochain.org/get-started/" target="_blank">
        <img src="./assets/holochainLogo.svg" class="logo holochain" alt="holochain logo" />
      </a>
    </div>
    <h1>Holochain Vue hApp</h1>
    <div>
      <div class="card">
        <p v-if="loading">connecting...</p>
        <p v-else-if="error">{{ error.message }}</p>
        <p v-else>Client is connected.</p>
      </div>
      <p>Import scaffolded components into <code>src/App.vue</code> to use your hApp</p>
      <p class="read-the-docs">Click on the Holochain logo to learn more</p>
    </div>
  </div>
</template>

<script lang="ts">
import { computed, defineComponent } from 'vue';
import { AppClient, AppWebsocket, HolochainError } from '@holochain/client';
{{#if holo_enabled}}
import WebSdk from '@holo-host/web-sdk';
import type { AgentState } from '@holo-host/web-sdk';
{{/if}}

export default defineComponent({
  components: {},
  data(): {
    client: AppClient | undefined;
    error: HolochainError | undefined;
    loading: boolean;
  {{#if holo_enabled}}
    IS_HOLO: boolean;
  {{/if}}
  } {
    return {
      client: undefined,
      error: undefined,
      loading: false,
    {{#if holo_enabled}}
      IS_HOLO: ['true', '1', 't'].includes(import.meta.env.VITE_APP_IS_HOLO?.toLowerCase()),
    {{/if}}
    };
  },
  async mounted() {
  {{#if holo_enabled}}
    try {
      this.loading = true
      if (this.IS_HOLO) {
        const client: WebSdk = await WebSdk.connect({
          chaperoneUrl: import.meta.env.VITE_APP_CHAPERONE_URL,
          authFormCustomization: {
            appName: '{{app_name}}',
          }
        });
        client.on('agent-state', (agent_state: AgentState) => {
          this.loading = !agent_state.isAvailable || agent_state.isAnonymous
        });
        client.signUp({ cancellable: false });
        this.client = client
      } else {
        this.client = await AppWebsocket.connect();
      }
    } catch (e) {
      this.error = e as HolochainError;
    } finally {
      this.loading = false;
    }
  {{else}}
    try {
      this.loading = true;
      this.client = await AppWebsocket.connect();
    } catch (e) {
      this.error = e as HolochainError;
    } finally {
      this.loading = false;
    }
  {{/if}}
  },
{{#if holo_enabled}}
  methods: {
    async logout () {
      await (this.client as WebSdk).signOut();
      await (this.client as WebSdk).signIn({ cancellable: false });
    }
  },
{{/if}}
  provide() {
    return {
      client: computed(() => this.client),
    };
  },
});
</script>

<style scoped>
  .logo {
    height: 15em;
    padding: 1.5em;
    will-change: filter;
    transition: filter 300ms;
    width: auto;
  }

  .logo:hover {
    filter: drop-shadow(0 0 2em #646cffaa);
  }

  .logo.holochain:hover {
    filter: drop-shadow(0 0 2em #61dafbaa);
  }

  .card {
    padding: 2em;
  }

  .read-the-docs {
    color: #888;
  }
</style>