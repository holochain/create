import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { ActionHash, EntryHash, AgentPubKey, Record, AppClient, DnaHash, HolochainError } from '@holochain/client';
import { consume } from '@lit-labs/context';
import { decode } from '@msgpack/msgpack';
{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

import { sharedStyles } from '../../shared-styles';
import { clientContext } from '../../contexts';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from './types';

@customElement('edit-{{kebab_case entry_type.name}}')
export class Edit{{pascal_case entry_type.name}} extends LitElement {

  @consume({ context: clientContext })
  client!: AppClient;

  {{#if link_from_original_to_each_update}}
  @property({
      hasChanged: (newVal: ActionHash, oldVal: ActionHash) => newVal?.toString() !== oldVal?.toString()
  })
  original{{pascal_case entry_type.name}}Hash!: ActionHash;

  {{/if}}

  @property()
  currentRecord!: Record;

  get current{{pascal_case entry_type.name}}() {
    return decode((this.currentRecord.entry as any).Present.entry) as {{pascal_case entry_type.name}};
  }

  {{#each entry_type.fields}}
    {{#if widget }}
      {{#if (not (eq cardinality "vector" ) )}}
  @state()
  _{{camel_case field_name}}{{#if (eq cardinality "single")}}!{{/if}}: {{> (concat field_type.type "/type") }}{{#if (eq cardinality "option")}} | undefined{{/if}};

      {{else}}
  @state()
  _{{camel_case field_name}}: Array<{{> (concat field_type.type "/type") }}> = this.current{{pascal_case ../entry_type.name}}.{{snake_case field_name}};

      {{/if}}
    {{/if}}
  {{/each}}

  is{{pascal_case entry_type.name}}Valid() {
    return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat "this._" (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && this._{{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};
  }

  connectedCallback() {
    super.connectedCallback();
    if (!this.currentRecord) {
      throw new Error(`The currentRecord property is required for the edit-{{kebab_case entry_type.name}} element`);
    }
{{#if link_from_original_to_each_update}}

    if (!this.original{{pascal_case entry_type.name}}Hash) {
      throw new Error(`The original{{pascal_case entry_type.name}}Hash property is required for the edit-{{kebab_case entry_type.name}} element`);
    }
{{/if}}

{{#each entry_type.fields}}
  {{#if widget}}
    this._{{camel_case field_name}} = this.current{{pascal_case ../entry_type.name}}.{{snake_case field_name}};
  {{/if}}
{{/each}}
  }

  async update{{pascal_case entry_type.name}}() {
    const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = {
    {{#each entry_type.fields}}
      {{#if widget}}
        {{#if (eq cardinality "single") }}
      {{snake_case field_name}}: this._{{camel_case field_name}}!,
        {{else}}
      {{snake_case field_name}}: this._{{camel_case field_name}},
        {{/if}}
      {{/if}}
    {{/each}}
    {{#each entry_type.fields}}
      {{#if (not widget)}}
      {{snake_case field_name}}: this.current{{pascal_case ../entry_type.name}}.{{snake_case field_name}},
      {{/if}}
    {{/each}}
    };

    try {
      const updateRecord: Record = await this.client.callZome({
        cap_secret: null,
        role_name: '{{dna_role_name}}',
        zome_name: '{{coordinator_zome_manifest.name}}',
        fn_name: 'update_{{snake_case entry_type.name}}',
        payload: {
          {{#if link_from_original_to_each_update}}
          original_{{snake_case entry_type.name}}_hash: this.original{{pascal_case entry_type.name}}Hash,
          {{/if}}
          previous_{{snake_case entry_type.name}}_hash: this.currentRecord.signed_action.hashed.hash,
          updated_{{snake_case entry_type.name}}: {{camel_case entry_type.name}}
        },
      });

      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-updated', {
        composed: true,
        bubbles: true,
        detail: {
          {{#if link_from_original_to_each_update}}
          original{{pascal_case entry_type.name}}Hash: this.original{{pascal_case entry_type.name}}Hash,
          {{/if}}
          previous{{pascal_case entry_type.name}}Hash: this.currentRecord.signed_action.hashed.hash,
          updated{{pascal_case entry_type.name}}Hash: updateRecord.signed_action.hashed.hash
        }
      }));
    } catch (e) {
      alert((e as HolochainError).message);
    }
  }

  render() {
    return html`
      <section>
{{#each entry_type.fields}}
  {{#if widget}}
        <div>
    {{#if (not (eq cardinality "vector") )}}
          {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) variable_to_read=(concat "this._" (camel_case field_name) ) variable_to_change=(concat "this._" (camel_case field_name) ) required=(eq cardinality "single") }}
    {{else}}
        {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
    {{/if}}

        </div>

  {{/if}}
{{/each}}

        <div>
          <button @click=${() => this.dispatchEvent(new CustomEvent('edit-canceled', {
              bubbles: true,
              composed: true
            }))}
          >
            Cancel
          </button>
          <button .disabled=${!this.is{{pascal_case entry_type.name}}Valid()} @click=${() => this.update{{pascal_case entry_type.name}}()}>
            Save
          </button>
        </div>
      </section>
    `;
  }

  static styles = sharedStyles;
}
